name: Build and Release CLI

on:
  push:
    tags:
      - 'cli-v*'

env:
  GO_VERSION: '^1.23.5'
      
jobs:
  build:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: modcli
            asset_name: modcli-linux-amd64
          - os: windows-latest
            artifact_name: modcli.exe
            asset_name: modcli-windows-amd64.exe
          - os: macos-latest
            artifact_name: modcli
            asset_name: modcli-darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/cli-v}" >> $GITHUB_ENV
        shell: bash

      - name: Build
        run: |
          cd cmd/modcli
          go build -v -ldflags "-X github.com/GoCodeAlone/modular/cmd/modcli/cmd.Version=${{ env.VERSION }} -X github.com/GoCodeAlone/modular/cmd/modcli/cmd.Commit=${{ github.sha }} -X github.com/GoCodeAlone/modular/cmd/modcli/cmd.Date=$(date +'%Y-%m-%d')" -o ${{ matrix.artifact_name }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: cmd/modcli/${{ matrix.artifact_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/cli-v}" >> $GITHUB_ENV
        shell: bash

      - name: Generate changelog
        id: changelog
        run: |
          MODULE=${{ steps.version.outputs.module }}
          TAG=${{ steps.version.outputs.tag }}
          
          # Find the previous tag for this module to use as starting point for changelog
          PREV_TAG=$(git tag -l "cli-v*" | sort -V | tail -n1 || echo "")
          
          # Generate changelog by looking at commits that touched the module's directory
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, including all history for the module"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" -- "cmd/modcli")
          else
            echo "Generating changelog from $PREV_TAG to HEAD"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD -- "cmd/modcli")
          fi
          
          # If no specific changes found for this module
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- No specific changes since last release"
          fi
          
          # Save changelog to a file with module & version info
          echo "# Modular CLI ${TAG}" > changelog.md
          echo "" >> changelog.md
          echo "## Changes" >> changelog.md
          echo "" >> changelog.md
          echo "$CHANGELOG" >> changelog.md
          
          # Escape special characters for GitHub Actions
          CHANGELOG_ESCAPED=$(cat changelog.md | jq -Rs .)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Generated changelog for Modular CLI"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: cli-v${{ env.VERSION }}
          release_name: Modular CLI v${{ env.VERSION }}
          draft: false
          prerelease: false
          body: |
            Modular CLI v${{ env.VERSION }}
            
            A command-line tool for generating Modular modules and configurations.
            
            ### Features:
            - Generate new modules with customizable features
            - Generate configuration structs with validation
            - Support for tenant-aware modules
            - Generate sample configuration files

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Create release
        id: create_release
        run: |
          gh release create cli-v${{ env.VERSION }} \
            --title "Modular CLI v${{ steps.version.outputs.next_version }}" \
            --notes-file changelog.md \
            --repo ${{ github.repository }} \
            --latest=false './artifacts/modcli-linux-amd64/modcli#modcli-linux-amd64' \
            './artifacts/modcli-windows-amd64.exe/modcli.exe#modcli-windows-amd64.exe' \
            './artifacts/modcli-darwin-arm64/modcli#modcli-darwin-arm64'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
