// Code generated by MockGen. DO NOT EDIT.
// Source: application.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_application_test.go -source=application.go -package=modular
//

// Package modular is a generated GoMock package.
package modular

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAppRegistry is a mock of AppRegistry interface.
type MockAppRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockAppRegistryMockRecorder
	isgomock struct{}
}

// MockAppRegistryMockRecorder is the mock recorder for MockAppRegistry.
type MockAppRegistryMockRecorder struct {
	mock *MockAppRegistry
}

// NewMockAppRegistry creates a new mock instance.
func NewMockAppRegistry(ctrl *gomock.Controller) *MockAppRegistry {
	mock := &MockAppRegistry{ctrl: ctrl}
	mock.recorder = &MockAppRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRegistry) EXPECT() *MockAppRegistryMockRecorder {
	return m.recorder
}

// SvcRegistry mocks base method.
func (m *MockAppRegistry) SvcRegistry() ServiceRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvcRegistry")
	ret0, _ := ret[0].(ServiceRegistry)
	return ret0
}

// SvcRegistry indicates an expected call of SvcRegistry.
func (mr *MockAppRegistryMockRecorder) SvcRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvcRegistry", reflect.TypeOf((*MockAppRegistry)(nil).SvcRegistry))
}

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
	isgomock struct{}
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// ConfigProvider mocks base method.
func (m *MockApplication) ConfigProvider() ConfigProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigProvider")
	ret0, _ := ret[0].(ConfigProvider)
	return ret0
}

// ConfigProvider indicates an expected call of ConfigProvider.
func (mr *MockApplicationMockRecorder) ConfigProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigProvider", reflect.TypeOf((*MockApplication)(nil).ConfigProvider))
}

// ConfigSections mocks base method.
func (m *MockApplication) ConfigSections() map[string]ConfigProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSections")
	ret0, _ := ret[0].(map[string]ConfigProvider)
	return ret0
}

// ConfigSections indicates an expected call of ConfigSections.
func (mr *MockApplicationMockRecorder) ConfigSections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSections", reflect.TypeOf((*MockApplication)(nil).ConfigSections))
}

// GetConfigSection mocks base method.
func (m *MockApplication) GetConfigSection(section string) (ConfigProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigSection", section)
	ret0, _ := ret[0].(ConfigProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigSection indicates an expected call of GetConfigSection.
func (mr *MockApplicationMockRecorder) GetConfigSection(section any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigSection", reflect.TypeOf((*MockApplication)(nil).GetConfigSection), section)
}

// GetService mocks base method.
func (m *MockApplication) GetService(name string, target any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", name, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetService indicates an expected call of GetService.
func (mr *MockApplicationMockRecorder) GetService(name, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockApplication)(nil).GetService), name, target)
}

// Init mocks base method.
func (m *MockApplication) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockApplicationMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockApplication)(nil).Init))
}

// Logger mocks base method.
func (m *MockApplication) Logger() Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockApplicationMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockApplication)(nil).Logger))
}

// RegisterConfigSection mocks base method.
func (m *MockApplication) RegisterConfigSection(section string, cp ConfigProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterConfigSection", section, cp)
}

// RegisterConfigSection indicates an expected call of RegisterConfigSection.
func (mr *MockApplicationMockRecorder) RegisterConfigSection(section, cp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConfigSection", reflect.TypeOf((*MockApplication)(nil).RegisterConfigSection), section, cp)
}

// RegisterModule mocks base method.
func (m *MockApplication) RegisterModule(module Module) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterModule", module)
}

// RegisterModule indicates an expected call of RegisterModule.
func (mr *MockApplicationMockRecorder) RegisterModule(module any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModule", reflect.TypeOf((*MockApplication)(nil).RegisterModule), module)
}

// RegisterService mocks base method.
func (m *MockApplication) RegisterService(name string, service any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterService", name, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockApplicationMockRecorder) RegisterService(name, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockApplication)(nil).RegisterService), name, service)
}

// Run mocks base method.
func (m *MockApplication) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockApplicationMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockApplication)(nil).Run))
}

// Start mocks base method.
func (m *MockApplication) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockApplicationMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockApplication)(nil).Start))
}

// Stop mocks base method.
func (m *MockApplication) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockApplicationMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockApplication)(nil).Stop))
}

// SvcRegistry mocks base method.
func (m *MockApplication) SvcRegistry() ServiceRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvcRegistry")
	ret0, _ := ret[0].(ServiceRegistry)
	return ret0
}

// SvcRegistry indicates an expected call of SvcRegistry.
func (mr *MockApplicationMockRecorder) SvcRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvcRegistry", reflect.TypeOf((*MockApplication)(nil).SvcRegistry))
}

// MockTenantApplication is a mock of TenantApplication interface.
type MockTenantApplication struct {
	ctrl     *gomock.Controller
	recorder *MockTenantApplicationMockRecorder
	isgomock struct{}
}

// MockTenantApplicationMockRecorder is the mock recorder for MockTenantApplication.
type MockTenantApplicationMockRecorder struct {
	mock *MockTenantApplication
}

// NewMockTenantApplication creates a new mock instance.
func NewMockTenantApplication(ctrl *gomock.Controller) *MockTenantApplication {
	mock := &MockTenantApplication{ctrl: ctrl}
	mock.recorder = &MockTenantApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantApplication) EXPECT() *MockTenantApplicationMockRecorder {
	return m.recorder
}

// GetTenantConfig mocks base method.
func (m *MockTenantApplication) GetTenantConfig(tenantID TenantID, section string) (ConfigProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantConfig", tenantID, section)
	ret0, _ := ret[0].(ConfigProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantConfig indicates an expected call of GetTenantConfig.
func (mr *MockTenantApplicationMockRecorder) GetTenantConfig(tenantID, section any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantConfig", reflect.TypeOf((*MockTenantApplication)(nil).GetTenantConfig), tenantID, section)
}

// GetTenantService mocks base method.
func (m *MockTenantApplication) GetTenantService() (TenantService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantService")
	ret0, _ := ret[0].(TenantService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantService indicates an expected call of GetTenantService.
func (mr *MockTenantApplicationMockRecorder) GetTenantService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantService", reflect.TypeOf((*MockTenantApplication)(nil).GetTenantService))
}

// WithTenant mocks base method.
func (m *MockTenantApplication) WithTenant(tenantID TenantID) (*TenantContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTenant", tenantID)
	ret0, _ := ret[0].(*TenantContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTenant indicates an expected call of WithTenant.
func (mr *MockTenantApplicationMockRecorder) WithTenant(tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTenant", reflect.TypeOf((*MockTenantApplication)(nil).WithTenant), tenantID)
}
